1.1 shelve读写二进制文件
========================

利用shelve 模块，你可以将Python 程序中的变量保存到二进制的shelf
文件中。这样，程序就可以从硬盘中恢复变量的数据。shelve模块让你在程序中添加“保存”和“打开”功能。例如，如果运行一个程序，并输入了一些配置设置，就可以将这些设置保存到一个shelf文件，然后让程序下一次运行时加载它们。
在交互式环境中输入以下代码：

.. code:: python

   import shelve
   shelfFile = shelve.open('mydata')
   cats = ['Zophie', 'Pooka', 'Simon']
   shelfFile['cats'] = cats
   shelfFile.close()

要利用shelve
模块读写数据，首先要导入它。调用函数shelve.open()并传入一个文件名，然后将返回的值保存在一个变量中。可以对这个变量的shelf
值进行修改，就像它是一个字典一样。当你完成时，在这个值上调用close()。这里，我们的shelf值保存在shelfFile中。我们创建了一个列表cats，并写下shelfFile[‘cats’]=cats，将该列表保存在shelfFile中，作为键’cats’关联的值（就像在字典中一样）。然后我们在shelfFile
上调用close()。

在Windows 上运行前面的代码，你会看到在当前工作目录下有3 个新文件：
mydata.bak、mydata.dat 和mydata.dir。在OSX上，只会创建一个mydata.db
文件。

这些二进制文件包含了存储在shelf中的数据。这些二进制文件的格式并不重要，你只需要知道shelve模块做了什么，而不必知道它是怎么做的。该模块让你不用操心如何将程序的数据保存到文件中。

你的程序稍后可以使用shelve 模块，重新打开这些文件并取出数据。shelf
值不必用读模式或写模式打开，因为它们在打开后，既能读又能写。

在交互式环境中输入以下代码：

.. code:: python

   shelfFile = shelve.open('mydata')
   shelfFile['cats']
   shelfFile.close()

这里，我们打开了shelf文件，检查我们的数据是否正确存储。输入shelfFile[‘cats’]将返回我们前面保存的同一个列表，所以我们就知道该列表得到了正确存储，然后我们调用close()。

就像字典一样，shelf值有keys()和values()方法，返回shelf中键和值的类似列表的值。因为这些方法返回类似列表的值，而不是真正的列表，所以应该将它们传递给list()函数，取得列表的形式。

创建文件时，如果你需要在Notepad或TextEdit这样的文本编辑器中读取它们，纯文本就非常有用。但是，如果想要保存Python程序中的数据，那就使用shelve
模块。
